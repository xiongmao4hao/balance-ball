###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       06/Jul/2017  20:22:27
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\my\WH_ov7725.c
#    Command line =  
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\my\WH_ov7725.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\FLASH\List -lB
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\FLASH\List -o
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\app\ -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\common\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\..\..\lib\USB\class\
#        -I C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\..\my\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\FLASH\List\WH_ov7725.lst
#    Object file  =  
#        C:\Users\shize\Desktop\电设\bloodc\project\plane\iar\FLASH\Obj\WH_ov7725.o
#
###############################################################################

C:\Users\shize\Desktop\电设\bloodc\project\plane\my\WH_ov7725.c
      1          
      2          
      3          #include "WH_ov7725.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
      4          
      5          
      6          
      7          extern PIT_InitTypeDef   pit_init_struct;
      8          extern char start,send_;
      9          extern UART_InitTypeDef  uart0_init_struct;
     10          
     11          
     12          static void porta_isr(void);
     13          static void portb_isr(void);
     14          static void gpio_init(void);
     15          static void dma_init(void);
     16          static void img_extract(uint8 *dst, uint8 *src, uint32 srclen);
     17          static void delay();
     18          static uint8 ov7725_reg_Init();
     19          static void delay_ms(unsigned int ms);
     20          

   \                                 In section .bss, align 4
     21          GPIO_InitTypeDef pta_init;
   \                     pta_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     22          GPIO_InitTypeDef ptb_init;
   \                     ptb_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     23          GPIO_InitTypeDef pte_init;
   \                     pte_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     24          GPIO_InitTypeDef ptd_init;
   \                     ptd_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     25          DMA_InitTypeDef dma_init_struct;
   \                     dma_init_struct:
   \   00000000                      DS8 44
     26          
     27          

   \                                 In section .bss, align 4
     28          uint8 Pix_Data[PHOTO_SIZE];       //二值化数据  
   \                     Pix_Data:
   \   00000000                      DS8 420

   \                                 In section .bss, align 4
     29          uint8 Pix_TURE_Data[PHOTO_TURE_SIZE];//解压后数据
   \                     Pix_TURE_Data:
   \   00000000                      DS8 3360

   \                                 In section .bss, align 4
     30          uint32 V_Cnt;                     //行采集计数
   \                     V_Cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     31          uint8 Is_DispPhoto;               //图像发送标志
   \                     Is_DispPhoto:
   \   00000000                      DS8 1
     32          
     33          
     34          /*
     35           * 延时ms,         ms=1时，正负脉宽1.12ms，周期2.24ms
     36           */
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void delay_ms(unsigned int ms)
     39          {
     40            uint16 i,j;
     41            for(i=0;i<ms;i++)
   \                     delay_ms: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE004             B.N      ??delay_ms_0
     42            for(j=0;j<ms;j++);
   \                     ??delay_ms_1: (+1)
   \   00000004   0x1C52             ADDS     R2,R2,#+1
   \                     ??delay_ms_2: (+1)
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0x4282             CMP      R2,R0
   \   0000000A   0xD3FB             BCC.N    ??delay_ms_1
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_ms_0: (+1)
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xD201             BCS.N    ??delay_ms_3
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xE7F6             B.N      ??delay_ms_2
     43          }
   \                     ??delay_ms_3: (+1)
   \   00000018   0x4770             BX       LR               ;; return
     44          
     45          
     46          
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void ov7725_init (void)
     49          {
   \                     ov7725_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     50           
     51            
     52            ov7725_reg_Init();
   \   00000002   0x.... 0x....      BL       ov7725_reg_Init
     53            while(ov7725_reg_Init() == 0);
   \                     ??ov7725_init_0: (+1)
   \   00000006   0x.... 0x....      BL       ov7725_reg_Init
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD0FB             BEQ.N    ??ov7725_init_0
     54            delay();
   \   0000000E   0x.... 0x....      BL       delay
     55            
     56            V_Cnt=0;          //行计数
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000018   0x6008             STR      R0,[R1, #+0]
     57            Is_DispPhoto=0;   //显示图像标志
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     58            
     59            gpio_init();
   \   00000022   0x.... 0x....      BL       gpio_init
     60            dma_init();
   \   00000026   0x.... 0x....      BL       dma_init
     61            
     62            //使能PORTA中断
     63            LPLD_GPIO_ClearIntFlag(PORTA);
   \   0000002A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x400490a0
   \   00000032   0x6008             STR      R0,[R1, #+0]
     64            enable_irq(PORTA_IRQn);
   \   00000034   0x2057             MOVS     R0,#+87
   \   00000036   0x.... 0x....      BL       NVIC_EnableIRQ
     65          
     66            
     67          
     68          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
     69          
     70          

   \                                 In section .text, align 2, keep-with-next
     71          void extract()
     72          {
   \                     extract: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     73            if(Is_DispPhoto==1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD109             BNE.N    ??extract_0
     74            {
     75              DisableInterrupts;
   \   0000000C   0xB672             CPSID    I
     76              img_extract(Pix_TURE_Data,Pix_Data,PHOTO_SIZE);
   \   0000000E   0xF44F 0x72D2      MOV      R2,#+420
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable10_5
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   0000001A   0x.... 0x....      BL       img_extract
     77              EnableInterrupts;   
   \   0000001E   0xB662             CPSIE    I
     78            }
     79          }
   \                     ??extract_0: (+1)
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void send_image()    //发送图像
     82          {
   \                     send_image: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83            
     84              DisableInterrupts;
   \   00000002   0xB672             CPSID    I
     85              static int i=0;
     86               
     87              LPLD_UART_PutChar(UART4,0x1);  //上位机通信协议
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x400ea000
   \   0000000A   0x.... 0x....      BL       LPLD_UART_PutChar
     88              LPLD_UART_PutChar(UART4,0xfe);
   \   0000000E   0xF07F 0x0101      MVNS     R1,#+1
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x400ea000
   \   00000016   0x.... 0x....      BL       LPLD_UART_PutChar
     89                  
     90              for(i=0;i<=V*H-1;i++)   
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR.N    R1,??DataTable10_8
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xE00D             B.N      ??send_image_0
     91              {
     92          
     93                LPLD_UART_PutChar(UART4,Pix_Data[i]);
   \                     ??send_image_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable10_5
   \   00000024   0x....             LDR.N    R1,??DataTable10_8
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x5640             LDRSB    R0,[R0, R1]
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000002E   0x....             LDR.N    R0,??DataTable10_7  ;; 0x400ea000
   \   00000030   0x.... 0x....      BL       LPLD_UART_PutChar
     94                           
     95              }
   \   00000034   0x....             LDR.N    R0,??DataTable10_8
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable10_8
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \                     ??send_image_0: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable10_8
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF5B0 0x7FD2      CMP      R0,#+420
   \   00000046   0xDBEC             BLT.N    ??send_image_1
     96            
     97              
     98              LPLD_UART_PutChar(UART4,0xfe);
   \   00000048   0xF07F 0x0101      MVNS     R1,#+1
   \   0000004C   0x....             LDR.N    R0,??DataTable10_7  ;; 0x400ea000
   \   0000004E   0x.... 0x....      BL       LPLD_UART_PutChar
     99              LPLD_UART_PutChar(UART4,0x1);
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x....             LDR.N    R0,??DataTable10_7  ;; 0x400ea000
   \   00000056   0x.... 0x....      BL       LPLD_UART_PutChar
    100              
    101          
    102          
    103              EnableInterrupts;
   \   0000005A   0xB662             CPSIE    I
    104          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `send_image::i`:
   \   00000000                      DS8 4
    105          
    106          
    107          

   \                                 In section .text, align 2, keep-with-next
    108          void gpio_init()
    109          {
   \                     gpio_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    110            //OV数据口初始化：PTD8~PTD15
    111            ptd_init.GPIO_PTx = PTD;
   \   00000002   0x....             LDR.N    R0,??DataTable10_9  ;; 0x400ff0c0
   \   00000004   0x....             LDR.N    R1,??DataTable10_10
   \   00000006   0x6008             STR      R0,[R1, #+0]
    112            ptd_init.GPIO_Dir = DIR_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable10_10
   \   0000000C   0x7308             STRB     R0,[R1, #+12]
    113            ptd_init.GPIO_Pins = GPIO_Pin0_7;
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x....             LDR.N    R1,??DataTable10_10
   \   00000012   0x6048             STR      R0,[R1, #+4]
    114            ptd_init.GPIO_PinControl = IRQC_DIS | INPUT_PULL_DIS;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable10_10
   \   00000018   0x6088             STR      R0,[R1, #+8]
    115            LPLD_GPIO_Init(ptd_init);
   \   0000001A   0x....             LDR.N    R1,??DataTable10_10
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x2214             MOVS     R2,#+20
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Init
    116            
    117            //OV行信号接口初始化：PTB3-H
    118            ptb_init.GPIO_PTx = PTB;
   \   0000002C   0x....             LDR.N    R0,??DataTable10_11  ;; 0x400ff040
   \   0000002E   0x....             LDR.N    R1,??DataTable10_12
   \   00000030   0x6008             STR      R0,[R1, #+0]
    119            ptb_init.GPIO_Dir = DIR_INPUT;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable10_12
   \   00000036   0x7308             STRB     R0,[R1, #+12]
    120            ptb_init.GPIO_Pins = GPIO_Pin3;
   \   00000038   0x2008             MOVS     R0,#+8
   \   0000003A   0x....             LDR.N    R1,??DataTable10_12
   \   0000003C   0x6048             STR      R0,[R1, #+4]
    121            ptb_init.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN|INPUT_PF_EN;
   \   0000003E   0x....             LDR.N    R0,??DataTable10_13  ;; 0x90012
   \   00000040   0x....             LDR.N    R1,??DataTable10_12
   \   00000042   0x6088             STR      R0,[R1, #+8]
    122            ptb_init.GPIO_Isr = portb_isr;
   \   00000044   0x.... 0x....      ADR.W    R0,portb_isr
   \   00000048   0x....             LDR.N    R1,??DataTable10_12
   \   0000004A   0x6108             STR      R0,[R1, #+16]
    123            LPLD_GPIO_Init(ptb_init); 
   \   0000004C   0x....             LDR.N    R1,??DataTable10_12
   \   0000004E   0xB084             SUB      SP,SP,#+16
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x2214             MOVS     R2,#+20
   \   00000054   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000058   0xBC0F             POP      {R0-R3}
   \   0000005A   0x.... 0x....      BL       LPLD_GPIO_Init
    124            
    125            //OV场信号接口初始化：PTA5-V
    126            pta_init.GPIO_PTx = PTA;
   \   0000005E   0x....             LDR.N    R0,??DataTable10_14  ;; 0x400ff000
   \   00000060   0x....             LDR.N    R1,??DataTable10_15
   \   00000062   0x6008             STR      R0,[R1, #+0]
    127            pta_init.GPIO_Dir = DIR_INPUT;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x....             LDR.N    R1,??DataTable10_15
   \   00000068   0x7308             STRB     R0,[R1, #+12]
    128            pta_init.GPIO_Pins = GPIO_Pin5;
   \   0000006A   0x2020             MOVS     R0,#+32
   \   0000006C   0x....             LDR.N    R1,??DataTable10_15
   \   0000006E   0x6048             STR      R0,[R1, #+4]
    129            pta_init.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN|INPUT_PF_EN;
   \   00000070   0x....             LDR.N    R0,??DataTable10_13  ;; 0x90012
   \   00000072   0x....             LDR.N    R1,??DataTable10_15
   \   00000074   0x6088             STR      R0,[R1, #+8]
    130            pta_init.GPIO_Isr = porta_isr;
   \   00000076   0x.... 0x....      ADR.W    R0,porta_isr
   \   0000007A   0x....             LDR.N    R1,??DataTable10_15
   \   0000007C   0x6108             STR      R0,[R1, #+16]
    131            LPLD_GPIO_Init(pta_init); 
   \   0000007E   0x....             LDR.N    R1,??DataTable10_15
   \   00000080   0xB084             SUB      SP,SP,#+16
   \   00000082   0x4668             MOV      R0,SP
   \   00000084   0x2214             MOVS     R2,#+20
   \   00000086   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008A   0xBC0F             POP      {R0-R3}
   \   0000008C   0x.... 0x....      BL       LPLD_GPIO_Init
    132            
    133            //OV PCLK信号接口初始化：PTE6-PCLK
    134            pte_init.GPIO_PTx = PTE;
   \   00000090   0x....             LDR.N    R0,??DataTable10_16  ;; 0x400ff100
   \   00000092   0x....             LDR.N    R1,??DataTable10_17
   \   00000094   0x6008             STR      R0,[R1, #+0]
    135            pte_init.GPIO_Pins = GPIO_Pin6;
   \   00000096   0x2040             MOVS     R0,#+64
   \   00000098   0x....             LDR.N    R1,??DataTable10_17
   \   0000009A   0x6048             STR      R0,[R1, #+4]
    136            pte_init.GPIO_Dir = DIR_INPUT;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x....             LDR.N    R1,??DataTable10_17
   \   000000A0   0x7308             STRB     R0,[R1, #+12]
    137            pte_init.GPIO_PinControl = IRQC_DMAFA| INPUT_PULL_DIS;
   \   000000A2   0xF45F 0x3000      MOVS     R0,#+131072
   \   000000A6   0x....             LDR.N    R1,??DataTable10_17
   \   000000A8   0x6088             STR      R0,[R1, #+8]
    138            LPLD_GPIO_Init(pte_init); 
   \   000000AA   0x....             LDR.N    R1,??DataTable10_17
   \   000000AC   0xB084             SUB      SP,SP,#+16
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x2214             MOVS     R2,#+20
   \   000000B2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000B6   0xBC0F             POP      {R0-R3}
   \   000000B8   0x.... 0x....      BL       LPLD_GPIO_Init
    139            
    140          }
   \   000000BC   0xBD01             POP      {R0,PC}          ;; return
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void dma_init()
    143          {
   \                     dma_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    144            //DMA参数配置
    145            dma_init_struct.DMA_CHx = DMA_CH0;    //CH0通道
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable10_18
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    146            dma_init_struct.DMA_Req = PORTE_DMAREQ;       //PORTE为请求源
   \   0000000A   0x2035             MOVS     R0,#+53
   \   0000000C   0x....             LDR.N    R1,??DataTable10_18
   \   0000000E   0x7048             STRB     R0,[R1, #+1]
    147            dma_init_struct.DMA_MajorLoopCnt = H; //主循环计数值：行采集点数，宽度
   \   00000010   0x200A             MOVS     R0,#+10
   \   00000012   0x....             LDR.N    R1,??DataTable10_18
   \   00000014   0x8088             STRH     R0,[R1, #+4]
    148            dma_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable10_18
   \   0000001A   0x6088             STR      R0,[R1, #+8]
    149            dma_init_struct.DMA_SourceAddr = (uint32)&PTD->PDIR;        //源地址：PTD0~7
   \   0000001C   0x....             LDR.N    R0,??DataTable10_19  ;; 0x400ff0d0
   \   0000001E   0x....             LDR.N    R1,??DataTable10_18
   \   00000020   0x60C8             STR      R0,[R1, #+12]
    150            dma_init_struct.DMA_DestAddr = (uint32)Pix_Data;      //目的地址：存放图像的数组
   \   00000022   0x....             LDR.N    R0,??DataTable10_5
   \   00000024   0x....             LDR.N    R1,??DataTable10_18
   \   00000026   0x6188             STR      R0,[R1, #+24]
    151            dma_init_struct.DMA_DestAddrOffset = 1;       //目的地址偏移：每次读入增加1
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable10_18
   \   0000002C   0x83C8             STRH     R0,[R1, #+30]
    152            dma_init_struct.DMA_AutoDisableReq = TRUE;    //自动禁用请求
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable10_18
   \   00000032   0xF881 0x0024      STRB     R0,[R1, #+36]
    153            //初始化DMA
    154            LPLD_DMA_Init(dma_init_struct);
   \   00000036   0x....             LDR.N    R1,??DataTable10_18
   \   00000038   0xB084             SUB      SP,SP,#+16
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x222C             MOVS     R2,#+44
   \   0000003E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000042   0xBC0F             POP      {R0-R3}
   \   00000044   0x.... 0x....      BL       LPLD_DMA_Init
    155          }
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    156          
    157          

   \                                 In section .text, align 4, keep-with-next
    158          void porta_isr()
    159          {
   \                     porta_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    160            DisableInterrupts;
   \   00000002   0xB672             CPSID    I
    161            if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin5))
   \   00000004   0x....             LDR.N    R0,??DataTable10_4  ;; 0x400490a0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0680             LSLS     R0,R0,#+26
   \   0000000A   0xD512             BPL.N    ??porta_isr_0
    162            {
    163              //检测到场开始信号，加载目的地址
    164              LPLD_DMA_LoadDstAddr(DMA_CH0, Pix_Data);
   \   0000000C   0x....             LDR.N    R0,??DataTable10_5
   \   0000000E   0x....             LDR.N    R1,??DataTable10_20  ;; 0x40009010
   \   00000010   0x6008             STR      R0,[R1, #+0]
    165              //清行中断标志，防止进入无效行中断
    166              LPLD_GPIO_ClearIntFlag(PORTB);
   \   00000012   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000016   0x....             LDR.N    R1,??DataTable10_21  ;; 0x4004a0a0
   \   00000018   0x6008             STR      R0,[R1, #+0]
    167              enable_irq(PORTB_IRQn);
   \   0000001A   0x2058             MOVS     R0,#+88
   \   0000001C   0x.... 0x....      BL       NVIC_EnableIRQ
    168              LPLD_PIT_DisableIrq(pit_init_struct);
   \   00000020   0x....             LDR.N    R1,??DataTable10_22
   \   00000022   0xB084             SUB      SP,SP,#+16
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x2214             MOVS     R2,#+20
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002C   0xBC0F             POP      {R0-R3}
   \   0000002E   0x.... 0x....      BL       LPLD_PIT_DisableIrq
    169          //    LPLD_UART_DisableIrq(uart0_init_struct) ;
    170            }
    171            
    172            EnableInterrupts;
   \                     ??porta_isr_0: (+1)
   \   00000032   0xB662             CPSIE    I
    173            
    174          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
    175          void portb_isr()
    176          {
   \                     portb_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    177            DisableInterrupts;
   \   00000002   0xB672             CPSID    I
    178            if(LPLD_GPIO_IsPinxExt(PORTB, GPIO_Pin3))
   \   00000004   0x....             LDR.N    R0,??DataTable10_21  ;; 0x4004a0a0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0700             LSLS     R0,R0,#+28
   \   0000000A   0xD52A             BPL.N    ??portb_isr_0
    179            {
    180              //检测到行开始信号，使能DMA请求
    181              if(V_Cnt<58)
   \   0000000C   0x....             LDR.N    R0,??DataTable10_2
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x283A             CMP      R0,#+58
   \   00000012   0xD20F             BCS.N    ??portb_isr_1
    182              {
    183                 
    184                V_Cnt++;
   \   00000014   0x....             LDR.N    R0,??DataTable10_2
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable10_2
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    185                if(V_Cnt>16)          // 比预定小1的值
   \   0000001E   0x....             LDR.N    R0,??DataTable10_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2811             CMP      R0,#+17
   \   00000024   0xD31D             BCC.N    ??portb_isr_0
    186                LPLD_DMA_EnableReq(DMA_CH0);  
   \   00000026   0x....             LDR.N    R0,??DataTable10_23  ;; 0x4000800c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000002E   0x....             LDR.N    R1,??DataTable10_23  ;; 0x4000800c
   \   00000030   0x6008             STR      R0,[R1, #+0]
   \   00000032   0xE016             B.N      ??portb_isr_0
    187                
    188              }
    189              //行数采集已满，关闭中断
    190              else
    191              {
    192                //关GPIO中断 
    193                disable_irq(PORTA_IRQn);
   \                     ??portb_isr_1: (+1)
   \   00000034   0x2057             MOVS     R0,#+87
   \   00000036   0x.... 0x....      BL       NVIC_DisableIRQ
    194                disable_irq(PORTB_IRQn);
   \   0000003A   0x2058             MOVS     R0,#+88
   \   0000003C   0x.... 0x....      BL       NVIC_DisableIRQ
    195                Is_DispPhoto = 1;//可以显示图像
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x....             LDR.N    R1,??DataTable10_3
   \   00000044   0x7008             STRB     R0,[R1, #+0]
    196                V_Cnt=0; 
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR.N    R1,??DataTable10_2
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    197          //      if(send_==1) 
    198          //      send_image();
    199                extract();
   \   0000004C   0x.... 0x....      BL       extract
    200                //使能PIT
    201                LPLD_PIT_EnableIrq(pit_init_struct);
   \   00000050   0x....             LDR.N    R1,??DataTable10_22
   \   00000052   0xB084             SUB      SP,SP,#+16
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x2214             MOVS     R2,#+20
   \   00000058   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000005C   0xBC0F             POP      {R0-R3}
   \   0000005E   0x.... 0x....      BL       LPLD_PIT_EnableIrq
    202              }
    203            }
    204            EnableInterrupts;
   \                     ??portb_isr_0: (+1)
   \   00000062   0xB662             CPSIE    I
    205          }
   \   00000064   0xBD01             POP      {R0,PC}          ;; return
    206          
    207          
    208          #define OV_THRESHOLD OV_threshold

   \                                 In section .bss, align 1
    209          uint8 OV_threshold = 0;
   \                     OV_threshold:
   \   00000000                      DS8 1
    210          /*OV7725初始化配置表*/

   \                                 In section .data, align 4
    211          Register_Info ov7725_reg[] =
   \                     ov7725_reg:
   \   00000000   0x0D 0xC1          DC8 13, 193, 17, 2, 9, 3, 12, 208, 18, 64, 23, 63, 24, 80, 25, 3, 26
   \              0x11 0x02    
   \              0x09 0x03    
   \              0x0C 0xD0    
   \              0x12 0x40    
   \              0x17 0x3F    
   \              0x18 0x50    
   \              0x19 0x03    
   \              0x1A         
   \   00000011   0x78 0x32          DC8 120, 50, 0, 160, 10, 99, 224, 172, 255, 101, 12, 102, 0, 103, 0, 41
   \              0x00 0xA0    
   \              0x0A 0x63    
   \              0xE0 0xAC    
   \              0xFF 0x65    
   \              0x0C 0x66    
   \              0x00 0x67    
   \              0x00 0x29    
   \   00000021   0x14 0x2C          DC8 20, 44, 30, 42, 0, 126, 12, 127, 22, 128, 42, 129, 78, 130, 97, 131
   \              0x1E 0x2A    
   \              0x00 0x7E    
   \              0x0C 0x7F    
   \              0x16 0x80    
   \              0x2A 0x81    
   \              0x4E 0x82    
   \              0x61 0x83    
   \   00000031   0x6F 0x84          DC8 111, 132, 123, 133, 134, 134, 142, 135, 151, 136, 164, 137, 175
   \              0x7B 0x85    
   \              0x86 0x86    
   \              0x8E 0x87    
   \              0x97 0x88    
   \              0xA4 0x89    
   \              0xAF         
   \   0000003E   0x8A 0xC5          DC8 138, 197, 139, 215, 140, 232, 141, 32, 74, 0, 73, 19, 71, 8, 75, 20
   \              0x8B 0xD7    
   \              0x8C 0xE8    
   \              0x8D 0x20    
   \              0x4A 0x00    
   \              0x49 0x13    
   \              0x47 0x08    
   \              0x4B 0x14    
   \   0000004E   0x4C 0x17          DC8 76, 23, 70, 5, 34, 153, 35, 3, 166, 4, 155, 0, 156, 41, 171, 6, 158
   \              0x46 0x05    
   \              0x22 0x99    
   \              0x23 0x03    
   \              0xA6 0x04    
   \              0x9B 0x00    
   \              0x9C 0x29    
   \              0xAB 0x06    
   \              0x9E         
   \   0000005F   0x11 0x9F          DC8 17, 159, 2, 0, 0
   \              0x02 0x00    
   \              0x00         
    212          {
    213            //寄存器，寄存器值次
    214            {OV7725_COM4         , 0xC1},    //
    215            {OV7725_CLKRC        , 0x02},    //50帧
    216            {OV7725_COM2         , 0x03},
    217            {OV7725_COM3         , 0xD0},
    218            {OV7725_COM7         , 0x40},
    219            {OV7725_HSTART       , 0x3F},
    220            {OV7725_HSIZE        , 0x50},
    221            {OV7725_VSTRT        , 0x03},
    222            {OV7725_VSIZE        , 0x78},
    223            {OV7725_HREF         , 0x00},
    224            {OV7725_SCAL0        , 0x0A},
    225            {OV7725_AWB_Ctrl0    , 0xE0},
    226            {OV7725_DSPAuto      , 0xff},
    227            {OV7725_DSP_Ctrl2    , 0x0C},
    228            {OV7725_DSP_Ctrl3    , 0x00},
    229            {OV7725_DSP_Ctrl4    , 0x00},
    230            
    231          #if (CAMERA_W == 80)
    232          {OV7725_HOutSize     , 0x14},
    233          #elif (CAMERA_W == 160)
    234          {OV7725_HOutSize     , 0x28},
    235          #elif (CAMERA_W == 240)
    236          {OV7725_HOutSize     , 0x3c},
    237          #elif (CAMERA_W == 320)
    238          {OV7725_HOutSize     , 0x50},
    239          #else
    240          
    241          #endif
    242          
    243          #if (CAMERA_H == 60 )
    244          {OV7725_VOutSize     , 0x1E},
    245          #elif (CAMERA_H == 120 )
    246          {OV7725_VOutSize     , 0x3c},
    247          #elif (CAMERA_H == 180 )
    248          {OV7725_VOutSize     , 0x5a},
    249          #elif (CAMERA_H == 240 )
    250          {OV7725_VOutSize     , 0x78},
    251          #else
    252          
    253          #endif
    254          
    255          {OV7725_EXHCH        , 0x00},
    256          {OV7725_GAM1         , 0x0c},
    257          {OV7725_GAM2         , 0x16},
    258          {OV7725_GAM3         , 0x2a},
    259          {OV7725_GAM4         , 0x4e},
    260          {OV7725_GAM5         , 0x61},
    261          {OV7725_GAM6         , 0x6f},
    262          {OV7725_GAM7         , 0x7b},
    263          {OV7725_GAM8         , 0x86},
    264          {OV7725_GAM9         , 0x8e},
    265          {OV7725_GAM10        , 0x97},
    266          {OV7725_GAM11        , 0xa4},
    267          {OV7725_GAM12        , 0xaf},
    268          {OV7725_GAM13        , 0xc5},
    269          {OV7725_GAM14        , 0xd7},
    270          {OV7725_GAM15        , 0xe8},
    271          {OV7725_SLOP         , 0x20},
    272          {OV7725_LC_RADI      , 0x00},
    273          {OV7725_LC_COEF      , 0x13},
    274          {OV7725_LC_XC        , 0x08},
    275          {OV7725_LC_COEFB     , 0x14},
    276          {OV7725_LC_COEFR     , 0x17},
    277          {OV7725_LC_CTR       , 0x05},
    278          {OV7725_BDBase       , 0x99},
    279          {OV7725_BDMStep      , 0x03},
    280          {OV7725_SDE          , 0x04},
    281          {OV7725_BRIGHT       , 0x00},
    282          {OV7725_CNST         , 0x29},//0x38
    283          {OV7725_SIGN         , 0x06},
    284          {OV7725_UVADJ0       , 0x11},
    285          {OV7725_UVADJ1       , 0x02},
    286          
    287          };
    288          
    289          //uint8 cfgnum = sizeof(ov7725_reg);

   \                                 In section .data, align 1
    290          uint8 cfgnum = sizeof(ov7725_reg) / sizeof(ov7725_reg[0]); /*结构体数组成员数目*/
   \                     cfgnum:
   \   00000000   0x31               DC8 49
    291          
    292          
    293          /************************************************
    294          * 函数名：ov7725_reg_Init
    295          * 描述  ：Sensor 寄存器 初始化
    296          * 输入  ：无
    297          * 输出  ：返回1成功，返回0失败
    298          * 注意  ：无
    299          ************************************************/

   \                                 In section .data, align 1
    300          uint8 threshold = 56;
   \                     threshold:
   \   00000000   0x38               DC8 56

   \                                 In section .text, align 2, keep-with-next
    301          uint8 ov7725_reg_Init(void)
    302          {
   \                     ov7725_reg_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    303            uint16 i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    304            uint8 Sensor_IDCode = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    305            LPLD_SCCB_Init();
   \   0000000C   0x.... 0x....      BL       LPLD_SCCB_Init
    306            
    307            LPLD_SCCB_WriteReg(OV7725_CNST, OV_threshold);
   \   00000010   0x....             LDR.N    R0,??DataTable10_24
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0x209C             MOVS     R0,#+156
   \   00000016   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    308              
    309            delay_ms(50);
   \   0000001A   0x2032             MOVS     R0,#+50
   \   0000001C   0x.... 0x....      BL       delay_ms
    310            while( 0 == LPLD_SCCB_WriteReg ( OV7725_COM7, 0x80 ) ) /*复位sensor */
   \                     ??ov7725_reg_Init_0: (+1)
   \   00000020   0x2180             MOVS     R1,#+128
   \   00000022   0x2012             MOVS     R0,#+18
   \   00000024   0x.... 0x....      BL       LPLD_SCCB_WriteReg
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD105             BNE.N    ??ov7725_reg_Init_1
    311            {
    312              i++;
   \   0000002C   0x1C64             ADDS     R4,R4,#+1
    313              if(i == 20)
   \   0000002E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000030   0x2C14             CMP      R4,#+20
   \   00000032   0xD1F5             BNE.N    ??ov7725_reg_Init_0
    314              {
    315                return 0 ;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE031             B.N      ??ov7725_reg_Init_2
    316              }
    317            }
    318            delay_ms(50);
   \                     ??ov7725_reg_Init_1: (+1)
   \   00000038   0x2032             MOVS     R0,#+50
   \   0000003A   0x.... 0x....      BL       delay_ms
    319            
    320            if( 0 == LPLD_SCCB_ReadReg( OV7725_VER, &Sensor_IDCode, 1 ) )	 /* 读取sensor ID号*/
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x4669             MOV      R1,SP
   \   00000042   0x200B             MOVS     R0,#+11
   \   00000044   0x.... 0x....      BL       LPLD_SCCB_ReadReg
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD101             BNE.N    ??ov7725_reg_Init_3
    321            {
    322              return 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xE025             B.N      ??ov7725_reg_Init_2
    323            }
    324            
    325            if(Sensor_IDCode == OV7725_ID)          //若ID正确，则配置所有寄存器
   \                     ??ov7725_reg_Init_3: (+1)
   \   00000050   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000054   0x2821             CMP      R0,#+33
   \   00000056   0xD120             BNE.N    ??ov7725_reg_Init_4
    326            {
    327              LPLD_SCCB_WriteReg(OV7725_CNST, threshold);
   \   00000058   0x....             LDR.N    R0,??DataTable10_25
   \   0000005A   0x7801             LDRB     R1,[R0, #+0]
   \   0000005C   0x209C             MOVS     R0,#+156
   \   0000005E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    328              for( i = 0 ; i < cfgnum ; i++ )
   \   00000062   0x2400             MOVS     R4,#+0
   \   00000064   0xE000             B.N      ??ov7725_reg_Init_5
   \                     ??ov7725_reg_Init_6: (+1)
   \   00000066   0x1C64             ADDS     R4,R4,#+1
   \                     ??ov7725_reg_Init_5: (+1)
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0x....             LDR.N    R1,??DataTable10_26
   \   0000006C   0x7809             LDRB     R1,[R1, #+0]
   \   0000006E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000070   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000072   0x4288             CMP      R0,R1
   \   00000074   0xD20F             BCS.N    ??ov7725_reg_Init_7
    329              {
    330                if( 0 == LPLD_SCCB_WriteReg(ov7725_reg[i].Address, ov7725_reg[i].Value) )
   \   00000076   0x....             LDR.N    R0,??DataTable10_27
   \   00000078   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007A   0xEB00 0x0044      ADD      R0,R0,R4, LSL #+1
   \   0000007E   0x7841             LDRB     R1,[R0, #+1]
   \   00000080   0x....             LDR.N    R0,??DataTable10_27
   \   00000082   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000084   0xF810 0x0014      LDRB     R0,[R0, R4, LSL #+1]
   \   00000088   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008A   0x.... 0x....      BL       LPLD_SCCB_WriteReg
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD1E9             BNE.N    ??ov7725_reg_Init_6
    331                {
    332                  return 0;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xE002             B.N      ??ov7725_reg_Init_2
    333                }
    334              }
    335            }
    336            else
    337            {
    338              return 0;
    339            }
    340             
    341            return 1;
   \                     ??ov7725_reg_Init_7: (+1)
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0xE000             B.N      ??ov7725_reg_Init_2
   \                     ??ov7725_reg_Init_4: (+1)
   \   0000009A   0x2000             MOVS     R0,#+0
   \                     ??ov7725_reg_Init_2: (+1)
   \   0000009C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    342          }
    343          
    344          
    345          //srclen 是二值化图像的占用空间大小

   \                                 In section .text, align 2, keep-with-next
    346          void img_extract(uint8 *dst, uint8 *src, uint32 srclen)
    347          {
   \                     img_extract: (+1)
   \   00000000   0xB438             PUSH     {R3-R5}
    348              uint8 colour[2] = {255, 0}; //0 和 1 分别对应的颜色
   \   00000002   0x....             LDR.N    R3,??DataTable10_28
   \   00000004   0x881B             LDRH     R3,[R3, #+0]
   \   00000006   0xF8AD 0x3000      STRH     R3,[SP, #+0]
   \   0000000A   0xE038             B.N      ??img_extract_0
    349              //注：山外的摄像头 0 表示 白色，1表示 黑色
    350              uint8 tmpsrc;
    351              while(srclen --)
    352              {
    353                  tmpsrc = *src++;
   \                     ??img_extract_1: (+1)
   \   0000000C   0x780B             LDRB     R3,[R1, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
    354                  *dst++ = colour[ (tmpsrc >> 7 ) & 0x01 ];
   \   00000010   0x466C             MOV      R4,SP
   \   00000012   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000014   0x11DD             ASRS     R5,R3,#+7
   \   00000016   0x5D64             LDRB     R4,[R4, R5]
   \   00000018   0x7004             STRB     R4,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
    355                  *dst++ = colour[ (tmpsrc >> 6 ) & 0x01 ];
   \   0000001C   0x466C             MOV      R4,SP
   \   0000001E   0xF3C3 0x1580      UBFX     R5,R3,#+6,#+1
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x5D64             LDRB     R4,[R4, R5]
   \   00000026   0x7004             STRB     R4,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
    356                  *dst++ = colour[ (tmpsrc >> 5 ) & 0x01 ];
   \   0000002A   0x466C             MOV      R4,SP
   \   0000002C   0xF3C3 0x1540      UBFX     R5,R3,#+5,#+1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x5D64             LDRB     R4,[R4, R5]
   \   00000034   0x7004             STRB     R4,[R0, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
    357                  *dst++ = colour[ (tmpsrc >> 4 ) & 0x01 ];
   \   00000038   0x466C             MOV      R4,SP
   \   0000003A   0xF3C3 0x1500      UBFX     R5,R3,#+4,#+1
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x5D64             LDRB     R4,[R4, R5]
   \   00000042   0x7004             STRB     R4,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
    358                  *dst++ = colour[ (tmpsrc >> 3 ) & 0x01 ];
   \   00000046   0x466C             MOV      R4,SP
   \   00000048   0xF3C3 0x05C0      UBFX     R5,R3,#+3,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x5D64             LDRB     R4,[R4, R5]
   \   00000050   0x7004             STRB     R4,[R0, #+0]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
    359                  *dst++ = colour[ (tmpsrc >> 2 ) & 0x01 ];
   \   00000054   0x466C             MOV      R4,SP
   \   00000056   0xF3C3 0x0580      UBFX     R5,R3,#+2,#+1
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x5D64             LDRB     R4,[R4, R5]
   \   0000005E   0x7004             STRB     R4,[R0, #+0]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
    360                  *dst++ = colour[ (tmpsrc >> 1 ) & 0x01 ];
   \   00000062   0x466C             MOV      R4,SP
   \   00000064   0xF3C3 0x0540      UBFX     R5,R3,#+1,#+1
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x5D64             LDRB     R4,[R4, R5]
   \   0000006C   0x7004             STRB     R4,[R0, #+0]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
    361                  *dst++ = colour[ (tmpsrc >> 0 ) & 0x01 ];
   \   00000070   0x466C             MOV      R4,SP
   \   00000072   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000074   0xF013 0x0301      ANDS     R3,R3,#0x1
   \   00000078   0x5CE3             LDRB     R3,[R4, R3]
   \   0000007A   0x7003             STRB     R3,[R0, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
    362              }
   \                     ??img_extract_0: (+1)
   \   0000007E   0x0013             MOVS     R3,R2
   \   00000080   0x1E5A             SUBS     R2,R3,#+1
   \   00000082   0x2B00             CMP      R3,#+0
   \   00000084   0xD1C2             BNE.N    ??img_extract_1
    363          }
   \   00000086   0xBC31             POP      {R0,R4,R5}
   \   00000088   0x4770             BX       LR               ;; return
    364          
    365          /*
    366           * 延时一段时间
    367           */

   \                                 In section .text, align 4, keep-with-next
    368          void delay()
    369          {
    370            uint16 i, n;
    371            for(i=0;i<30000;i++)
   \                     delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??delay_0
    372            {
    373              for(n=0;n<200;n++)
    374              {
    375                asm("nop");
   \                     ??delay_1: (+1)
   \   00000004   0xBF00             nop
    376              }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??delay_2
    377            }
    378          }
   \                     ??delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     V_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     Is_DispPhoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     Pix_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     Pix_TURE_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     `send_image::i`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     ptd_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     ptb_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x00090012         DC32     0x90012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     pta_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     pte_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     dma_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x4004A0A0         DC32     0x4004a0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x........         DC32     pit_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x........         DC32     OV_threshold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     threshold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x........         DC32     cfgnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x........         DC32     ov7725_reg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0xFF 0x00          DC8 255, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       0   delay
       0   delay_ms
      48   dma_init
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
       8   extract
         8   -> img_extract
      24   gpio_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
      12   img_extract
       8   ov7725_init
         8   -> NVIC_EnableIRQ
         8   -> delay
         8   -> dma_init
         8   -> gpio_init
         8   -> ov7725_reg_Init
      16   ov7725_reg_Init
        16   -> LPLD_SCCB_Init
        16   -> LPLD_SCCB_ReadReg
        16   -> LPLD_SCCB_WriteReg
        16   -> delay_ms
      24   porta_isr
         8   -> LPLD_PIT_DisableIrq
         8   -> NVIC_EnableIRQ
        24   -> __aeabi_memcpy4
      24   portb_isr
         8   -> LPLD_PIT_EnableIrq
         8   -> NVIC_DisableIRQ
        24   -> __aeabi_memcpy4
         8   -> extract
       8   send_image
         8   -> LPLD_UART_PutChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       2  ?_0
       1  Is_DispPhoto
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
       1  OV_threshold
     420  Pix_Data
    3360  Pix_TURE_Data
       4  V_Cnt
       1  cfgnum
      32  delay
      26  delay_ms
      76  dma_init
      44  dma_init_struct
      34  extract
     190  gpio_init
       4  i
     138  img_extract
      60  ov7725_init
     100  ov7725_reg
     158  ov7725_reg_Init
      54  porta_isr
     102  portb_isr
      20  pta_init
      20  ptb_init
      20  ptd_init
      20  pte_init
      94  send_image
       1  threshold

 
 3 914 bytes in section .bss
   102 bytes in section .data
     2 bytes in section .rodata
 1 124 bytes in section .text
 
 1 124 bytes of CODE  memory
     2 bytes of CONST memory
 4 016 bytes of DATA  memory

Errors: none
Warnings: none
